{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","trim","length","preventDefault","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","props","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAIaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAEzB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAcA,OACI,sBAAMC,SAZU,SAACC,GACrBH,EAAWI,OAAOC,OAAO,IAEzBF,EAAEG,iBACFR,GAAe,SAAAS,GAAI,OAAKP,GAAL,mBAAmBO,OACtCN,EAAc,MAOV,SAEI,uBACAO,KAAK,OACLC,MAAOT,EACPU,SAnBiB,SAACP,GAAOF,EAAcE,EAAEQ,OAAOF,a,+BCL/CG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEbC,EAFa,iDAEmCC,UAAUH,GAF7C,+DAGAI,MAAOF,GAHP,cAGbG,EAHa,gBAIEA,EAAKC,OAJP,uBAIZC,EAJY,EAIZA,KACDC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACFC,GAAGD,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QATvB,kBAcdM,GAdc,4CAAH,sDCAPO,EAAc,SAAC,GAAiB,IAAhBH,EAAe,EAAfA,MAAMV,EAAS,EAATA,IAE/B,OACI,sBAAKc,UAAU,yCAAf,UACI,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAKA,QCFJO,EAAU,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SAGXa,ECJc,SAACb,GACzB,MAA0Bd,mBAAS,CAC/BqB,KAAK,GACLa,SAAQ,IAFZ,mBAAOC,EAAP,KAAcC,EAAd,KAgBA,OAVAC,qBAAU,WACNxB,EAAQC,GACPwB,MAAK,SAAAC,GAAOH,EAAS,CAClBf,KAAKkB,EACLL,SAAQ,SAGb,CAACpB,IAGGqB,EDbYK,CAAa1B,GAA3BO,KAGL,OACI,qCACA,6BAAKP,IAEL,qBAAKgB,UAAU,YAAf,SAEIH,EAAOJ,KAAK,SAAAC,GAAG,OAAI,cAAC,EAAD,eAEfA,GADEA,EAAIC,aEcPgB,EA5BM,SAAAC,GAEjB,MAAqC1C,mBAAU,CAAC,KAAhD,mBAAO2C,EAAP,KAAmB5C,EAAnB,KAEA,OACI,qCACI,8CACA,uBAEA,cAAC,EAAD,CAAaA,cAAeA,IAE5B,6BACM4C,EAAWpB,KAAI,SAAAT,GAAQ,OACzB,cAAC,EAAD,CAEAA,SAAWA,GADNA,Y,MCbrB8B,IAASC,OACP,cAAC,EAAD,IAEAC,SAASC,eAAe,W","file":"static/js/main.b19a1e73.chunk.js","sourcesContent":["import React from 'react'\nimport { useState } from 'react'\nimport PropTypes from 'prop-types'\n\nexport const AddCategory = ({setCategories}) => {\n\n    const [inputValue, setInputValue] = useState('');\n    const handleInputChange =(e) => {setInputValue(e.target.value)}\n    \n    const handleSubmit =(e)=> {\nif (inputValue.trim().length>2){\n\n    e.preventDefault();\n    setCategories( cats => [inputValue,...cats,]);\n    setInputValue('');\n    }\n\n\n    }\n\n    return (\n        <form onSubmit ={handleSubmit}>\n           \n            <input\n            type=\"text\"\n            value={inputValue}\n            onChange={handleInputChange}\n            />     \n        </form>\n    )\n}\n\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n\n}\n\n","\n\nexport const getGifs = async (category)=> {\n   \n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=EsxwADg8gekwmcNpmQHaom51F82WtPon`\n    const resp = await fetch (url);\n    const {data} = await resp.json();\n    const gifs = data.map( img => {\n        return {\n             id:img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url \n        }\n\n    })\n\n  return gifs;\n\n}","import React from 'react'\n\nexport const GifGridItem = ({title,url}) => {\n    \n    return (\n        <div className=\"card animate__animated animate__fadeIn\">\n            <img src={url} alt={title}/>\n            <p >{title}</p>\n        </div>\n    )\n}\n","\nimport { useFetchGifs } from '../hooks/useFetchGifs'\n//import { getGifs } from '../helpers/getGifs';\nimport { GifGridItem } from './GifGridItem';\n\nexport const GifGrid = ({category}) => {\n    \n\n  const {data:images}= useFetchGifs(category);\n \n\n    return (\n        <>\n        <h3>{category}</h3>\n\n        <div className=\"card-grid\">  \n            { \n            images.map( img=>( <GifGridItem \n            key= {img.id}\n            {...img}\n            />\n            ))\n            } \n             \n        </div> \n        </>\n    )\n}\n","import { useState, useEffect  } from \"react\";\nimport { getGifs } from \"../helpers/getGifs\";\n\n\nexport const useFetchGifs = (category)=> {\n    const [state, setState] = useState({\n        data:[],\n        loading:true\n    });\n   \n   \n    useEffect(() => {\n        getGifs(category)\n        .then(imgs=>{setState({\n            data:imgs,\n            loading:false})\n        })\n   \n    }, [category])\n\n    \n    return state;\n}\n","import { useState } from 'react'\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\nconst GifExpertApp = props => {\n\n    const [categories, setCategories ] = useState( ['']);\n\n    return (\n        <>\n            <h2>GifExpertApp</h2>\n            <hr/>\n            \n            <AddCategory setCategories={setCategories}/>\n\n            <ol>\n                { categories.map(category=>  \n                <GifGrid \n                key={category}\n                category={ category}/> )\n                }\n              \n            </ol>\n\n        </>\n    )\n}\n\nGifExpertApp.propTypes = {\n\n}\n\nexport default GifExpertApp\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\n import './index.css';\n\nReactDOM.render(\n  <GifExpertApp/>,\n  \n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}